
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '9ED68B312D176AAA4D8429D24274B8E5'
    
_lr_action_items = {'RETURN':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[1,-10,-11,1,-6,-7,-8,-13,-12,-5,1,1,-3,-2,1,1,-4,-1,]),'WHILE':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[3,-10,-11,3,-6,-7,-8,-13,-12,-5,3,3,-3,-2,3,3,-4,-1,]),'FLOAT_CONST':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[4,4,-10,4,4,4,-11,4,4,-62,-61,-63,4,-6,4,4,4,-7,-8,4,-13,-12,4,-53,-58,-52,-5,-55,-56,-51,4,-57,-59,-49,-60,-50,-54,4,4,4,4,4,-3,-2,4,4,4,-4,-1,]),'NEW':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[5,5,-10,5,5,5,-11,5,5,-62,-61,-63,5,-6,5,5,5,-7,-8,5,-13,-12,5,-53,-58,-52,-5,-55,-56,-51,5,-57,-59,-49,-60,-50,-54,5,5,5,5,5,-3,-2,5,5,5,-4,-1,]),'NULL':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[6,6,-10,6,6,6,-11,6,6,-62,-61,-63,6,-6,6,6,6,-7,-8,6,-13,-12,6,-53,-58,-52,-5,-55,-56,-51,6,-57,-59,-49,-60,-50,-54,6,6,6,6,6,-3,-2,6,6,6,-4,-1,]),'TRUE':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[7,7,-10,7,7,7,-11,7,7,-62,-61,-63,7,-6,7,7,7,-7,-8,7,-13,-12,7,-53,-58,-52,-5,-55,-56,-51,7,-57,-59,-49,-60,-50,-54,7,7,7,7,7,-3,-2,7,7,7,-4,-1,]),'MINUS':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,74,-29,-63,-15,-64,-64,-33,74,-35,-64,-32,-34,-64,74,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,74,-64,-37,74,-26,74,74,74,74,-28,-36,-64,-64,-27,74,74,]),'STRING_CONST':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[8,8,-10,8,8,8,-11,8,8,-62,-61,-63,8,-6,8,8,8,-7,-8,8,-13,-12,8,-53,-58,-52,-5,-55,-56,-51,8,-57,-59,-49,-60,-50,-54,8,8,8,8,8,-3,-2,8,8,8,-4,-1,]),'INT_CONST':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[9,9,-10,9,9,9,-11,9,9,-62,-61,-63,9,-6,9,9,9,-7,-8,9,-13,-12,9,-53,-58,-52,-5,-55,-56,-51,9,-57,-59,-49,-60,-50,-54,9,9,9,9,9,-3,-2,9,9,9,-4,-1,]),'LE':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,71,-29,-63,-15,-64,-64,-33,71,-35,-64,-32,-34,-64,71,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,71,-64,-37,71,-26,71,71,71,71,-28,-36,-64,-64,-27,71,71,]),'RPAREN':([4,6,7,8,9,10,12,13,14,19,21,23,24,25,29,30,31,32,33,34,35,36,37,38,40,41,42,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,85,86,87,89,90,91,92,95,96,97,99,100,102,105,106,107,],[-44,-46,-47,-45,-43,-10,-23,-21,-22,-64,-42,-11,-48,-24,-25,-20,-9,-14,-64,-62,-61,-30,-19,-40,-29,-63,-15,-64,-6,79,-33,83,-35,-64,-7,-8,-32,-34,-64,-13,-12,-18,-64,-53,-58,-52,-5,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,88,89,-37,91,-38,-26,94,-31,-16,-17,-28,96,-36,-64,-3,-27,-39,-2,-64,104,107,-4,-1,]),'SEMI':([0,1,4,6,7,8,9,10,11,12,13,14,21,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46,48,49,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,82,83,85,86,87,88,89,91,93,94,95,96,98,99,103,104,106,107,],[10,-64,-44,-46,-47,-45,-43,-10,46,-23,-21,-22,-42,-11,-48,-24,53,54,-25,-20,10,-14,-64,-62,-61,-30,-19,-40,65,-29,-63,-15,-6,-64,-33,-35,-7,-8,-32,-34,-64,-13,-12,-18,-64,-53,-58,-52,-5,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,-37,93,-26,-31,-16,-17,10,-28,-36,-64,10,-3,-27,100,-2,10,10,-4,-1,]),'NE':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,67,-29,-63,-15,-64,-64,-33,67,-35,-64,-32,-34,-64,67,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,67,-64,-37,67,-26,67,67,67,67,-28,-36,-64,-64,-27,67,67,]),'EE':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,66,-29,-63,-15,-64,-64,-33,66,-35,-64,-32,-34,-64,66,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,66,-64,-37,66,-26,66,66,66,66,-28,-36,-64,-64,-27,66,66,]),'LT':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,70,-29,-63,-15,-64,-64,-33,70,-35,-64,-32,-34,-64,70,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,70,-64,-37,70,-26,70,70,70,70,-28,-36,-64,-64,-27,70,70,]),'PLUS':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,72,-29,-63,-15,-64,-64,-33,72,-35,-64,-32,-34,-64,72,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,72,-64,-37,72,-26,72,72,72,72,-28,-36,-64,-64,-27,72,72,]),'COMMA':([4,6,7,8,9,12,21,24,25,29,32,33,34,35,36,37,38,40,41,42,47,49,51,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,83,85,86,87,89,90,91,92,96,97,],[-44,-46,-47,-45,-43,-23,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,-29,-63,-15,-64,-33,-35,-32,-34,-64,-18,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,-64,-37,92,-38,-26,-31,-16,-17,-28,92,-36,-64,-27,-39,]),'$end':([10,18,23,31,46,53,54,58,59,65,95,99,106,107,],[-10,0,-11,-9,-6,-7,-8,-13,-12,-5,-3,-2,-4,-1,]),'GT':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,63,-29,-63,-15,-64,-64,-33,63,-35,-64,-32,-34,-64,63,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,63,-64,-37,63,-26,63,63,63,63,-28,-36,-64,-64,-27,63,63,]),'DIVIDE':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,64,-29,-63,-15,-64,-64,-33,64,-35,-64,-32,-34,-64,64,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,64,-64,-37,64,-26,64,64,64,64,-28,-36,-64,-64,-27,64,64,]),'FOR':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[16,-10,-11,16,-6,-7,-8,-13,-12,-5,16,16,-3,-2,16,16,-4,-1,]),'PLUSPLUS':([0,1,10,15,19,21,23,28,31,33,34,35,38,40,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,88,92,93,94,95,99,100,103,104,106,107,],[17,17,-10,-40,17,-42,-11,55,17,17,-62,-61,-40,55,-63,17,-6,17,17,17,-7,-8,17,-13,-12,17,-53,-58,-52,-5,-55,-56,-51,17,-57,-59,-49,-60,-50,-54,-41,17,17,17,17,17,-3,-2,17,17,17,-4,-1,]),'PERIOD':([2,4,6,7,8,9,12,13,15,21,24,25,28,29,32,36,38,40,49,51,76,79,83,89,91,96,],[43,-44,-46,-47,-45,-43,-23,-30,-40,-42,-48,-24,-29,-25,43,-30,-40,-29,-29,-29,-41,-37,-26,-28,-36,-27,]),'RBRACE':([10,23,31,46,53,54,58,59,65,95,99,106,107,],[-10,-11,58,-6,-7,-8,-13,-12,-5,-3,-2,-4,-1,]),'TIMES':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,68,-29,-63,-15,-64,-64,-33,68,-35,-64,-32,-34,-64,68,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,68,-64,-37,68,-26,68,68,68,68,-28,-36,-64,-64,-27,68,68,]),'GE':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,73,-29,-63,-15,-64,-64,-33,73,-35,-64,-32,-34,-64,73,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,73,-64,-37,73,-26,73,73,73,73,-28,-36,-64,-64,-27,73,73,]),'LPAREN':([0,1,3,10,15,16,17,19,20,21,22,23,31,33,34,35,38,41,44,45,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,88,92,93,94,95,99,100,103,104,106,107,],[19,19,44,-10,47,48,19,19,19,-42,52,-11,19,19,-62,-61,47,-63,19,78,-6,19,19,19,-7,-8,19,-13,-12,19,-53,-58,-52,-5,-55,-56,-51,19,-57,-59,-49,-60,-50,-54,-41,19,19,19,19,19,-3,101,19,19,19,-4,-1,]),'MINUSMINUS':([0,1,10,15,19,21,23,28,31,33,34,35,38,40,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,88,92,93,94,95,99,100,103,104,106,107,],[20,20,-10,-40,20,-42,-11,56,20,20,-62,-61,-40,56,-63,20,-6,20,20,20,-7,-8,20,-13,-12,20,-53,-58,-52,-5,-55,-56,-51,20,-57,-59,-49,-60,-50,-54,-41,20,20,20,20,20,-3,-2,20,20,20,-4,-1,]),'ELSE':([101,],[103,]),'ID':([0,1,5,10,17,19,20,23,31,33,34,35,41,43,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[21,21,45,-10,21,21,21,-11,21,21,-62,-61,-63,76,21,-6,21,21,21,-7,-8,21,-13,-12,21,-53,-58,-52,-5,-55,-56,-51,21,-57,-59,-49,-60,-50,-54,21,21,21,21,21,-3,-2,21,21,21,-4,-1,]),'IF':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[22,-10,-11,22,-6,-7,-8,-13,-12,-5,22,22,-3,-2,22,22,-4,-1,]),'AND':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,62,-29,-63,-15,-64,-64,-33,62,-35,-64,-32,-34,-64,62,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,62,-64,-37,62,-26,62,62,62,62,-28,-36,-64,-64,-27,62,62,]),'EQUALS':([15,21,28,38,40,76,],[-40,-42,57,-40,57,-41,]),'LBRACE':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[23,-10,-11,23,-6,-7,-8,-13,-12,-5,23,23,-3,-2,23,23,-4,-1,]),'FALSE':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[24,24,-10,24,24,24,-11,24,24,-62,-61,-63,24,-6,24,24,24,-7,-8,24,-13,-12,24,-53,-58,-52,-5,-55,-56,-51,24,-57,-59,-49,-60,-50,-54,24,24,24,24,24,-3,-2,24,24,24,-4,-1,]),'THIS':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[25,25,-10,25,25,25,-11,25,25,-62,-61,-63,25,-6,25,25,25,-7,-8,25,-13,-12,25,-53,-58,-52,-5,-55,-56,-51,25,-57,-59,-49,-60,-50,-54,25,25,25,25,25,-3,-2,25,25,25,-4,-1,]),'BREAK':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[26,-10,-11,26,-6,-7,-8,-13,-12,-5,26,26,-3,-2,26,26,-4,-1,]),'CONTINUE':([0,10,23,31,46,53,54,58,59,65,88,94,95,99,103,104,106,107,],[27,-10,-11,27,-6,-7,-8,-13,-12,-5,27,27,-3,-2,27,27,-4,-1,]),'NOT':([1,19,33,34,35,41,44,47,52,57,61,62,63,64,66,67,68,69,70,71,72,73,74,75,78,92,93,],[41,41,41,-62,-61,-63,41,41,41,41,41,-53,-58,-52,-55,-56,-51,41,-57,-59,-49,-60,-50,-54,41,41,41,]),'SUPER':([0,1,10,17,19,20,23,31,33,34,35,41,44,46,47,48,52,53,54,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,88,92,93,94,95,99,100,103,104,106,107,],[29,29,-10,29,29,29,-11,29,29,-62,-61,-63,29,-6,29,29,29,-7,-8,29,-13,-12,29,-53,-58,-52,-5,-55,-56,-51,29,-57,-59,-49,-60,-50,-54,29,29,29,29,29,-3,-2,29,29,29,-4,-1,]),'OR':([1,4,6,7,8,9,12,19,21,24,25,29,32,33,34,35,36,37,38,39,40,41,42,44,47,49,50,51,52,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,89,91,92,93,96,97,98,],[-64,-44,-46,-47,-45,-43,-23,-64,-42,-48,-24,-25,-14,-64,-62,-61,-30,-19,-40,75,-29,-63,-15,-64,-64,-33,75,-35,-64,-32,-34,-64,75,-64,-53,-58,-52,-55,-56,-51,-64,-57,-59,-49,-60,-50,-54,-41,75,-64,-37,75,-26,75,75,75,75,-28,-36,-64,-64,-27,75,75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arith_op':([39,50,60,77,81,84,85,86,87,97,98,],[61,61,61,61,61,61,61,61,61,61,61,]),'field_access':([0,1,17,19,20,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[15,38,38,38,38,15,38,38,38,15,38,38,38,38,38,15,38,38,15,15,15,15,]),'bool_op':([39,50,60,77,81,84,85,86,87,97,98,],[69,69,69,69,69,69,69,69,69,69,69,]),'expr':([1,19,33,44,47,52,57,61,69,78,92,93,],[39,50,60,77,81,84,85,86,87,81,97,98,]),'primary':([0,1,17,19,20,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[2,32,2,32,2,2,32,32,32,2,32,32,32,32,32,2,32,32,2,2,2,2,]),'stmt':([0,31,88,94,103,104,],[18,59,95,99,105,106,]),'stmt_expr':([0,31,48,88,94,100,103,104,],[11,11,82,11,11,102,11,11,]),'literal':([0,1,17,19,20,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'lhs':([0,1,17,19,20,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[28,40,49,40,51,28,40,40,40,28,40,40,40,40,40,28,40,40,28,28,28,28,]),'empty':([0,1,19,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[14,37,37,14,37,37,37,14,37,37,37,37,37,14,37,37,14,14,14,14,]),'arguments':([47,78,],[80,90,]),'method_invocation':([0,1,17,19,20,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[13,36,36,36,36,13,36,36,36,13,36,36,36,36,36,13,36,36,13,13,13,13,]),'assign':([0,1,19,31,33,44,47,48,52,57,61,69,78,88,92,93,94,100,103,104,],[30,42,42,30,42,42,42,30,42,42,42,42,42,30,42,42,30,30,30,30,]),'block':([0,31,88,94,103,104,],[31,31,31,31,31,31,]),'unary_op':([1,19,33,44,47,52,57,61,69,78,92,93,],[33,33,33,33,33,33,33,33,33,33,33,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> IF LPAREN expr RPAREN stmt LPAREN ELSE stmt RPAREN','stmt',9,'p_stmt','decafparser.py',54),
  ('stmt -> IF LPAREN expr RPAREN stmt','stmt',5,'p_stmt','decafparser.py',55),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt','decafparser.py',56),
  ('stmt -> FOR LPAREN stmt_expr SEMI expr SEMI stmt_expr RPAREN stmt','stmt',9,'p_stmt','decafparser.py',57),
  ('stmt -> RETURN expr SEMI','stmt',3,'p_stmt','decafparser.py',58),
  ('stmt -> stmt_expr SEMI','stmt',2,'p_stmt','decafparser.py',59),
  ('stmt -> BREAK SEMI','stmt',2,'p_stmt','decafparser.py',60),
  ('stmt -> CONTINUE SEMI','stmt',2,'p_stmt','decafparser.py',61),
  ('stmt -> block','stmt',1,'p_stmt','decafparser.py',62),
  ('stmt -> SEMI','stmt',1,'p_stmt','decafparser.py',64),
  ('block -> LBRACE','block',1,'p_block','decafparser.py',77),
  ('block -> block stmt','block',2,'p_block','decafparser.py',78),
  ('block -> block RBRACE','block',2,'p_block','decafparser.py',79),
  ('expr -> primary','expr',1,'p_expr','decafparser.py',90),
  ('expr -> assign','expr',1,'p_expr','decafparser.py',91),
  ('expr -> expr arith_op expr','expr',3,'p_expr','decafparser.py',92),
  ('expr -> expr bool_op expr','expr',3,'p_expr','decafparser.py',93),
  ('expr -> unary_op expr','expr',2,'p_expr','decafparser.py',94),
  ('expr -> empty','expr',1,'p_expr','decafparser.py',95),
  ('stmt_expr -> assign','stmt_expr',1,'p_stmt_expr','decafparser.py',103),
  ('stmt_expr -> method_invocation','stmt_expr',1,'p_stmt_expr','decafparser.py',104),
  ('stmt_expr -> empty','stmt_expr',1,'p_stmt_expr','decafparser.py',105),
  ('primary -> literal','primary',1,'p_primary','decafparser.py',115),
  ('primary -> THIS','primary',1,'p_primary','decafparser.py',116),
  ('primary -> SUPER','primary',1,'p_primary','decafparser.py',117),
  ('primary -> LPAREN expr RPAREN','primary',3,'p_primary','decafparser.py',118),
  ('primary -> NEW ID LPAREN arguments RPAREN','primary',5,'p_primary','decafparser.py',119),
  ('primary -> NEW ID LPAREN RPAREN','primary',4,'p_primary','decafparser.py',120),
  ('primary -> lhs','primary',1,'p_primary','decafparser.py',121),
  ('primary -> method_invocation','primary',1,'p_primary','decafparser.py',122),
  ('assign -> lhs EQUALS expr','assign',3,'p_assign','decafparser.py',137),
  ('assign -> lhs PLUSPLUS','assign',2,'p_assign','decafparser.py',138),
  ('assign -> PLUSPLUS lhs','assign',2,'p_assign','decafparser.py',139),
  ('assign -> lhs MINUSMINUS','assign',2,'p_assign','decafparser.py',140),
  ('assign -> MINUSMINUS lhs','assign',2,'p_assign','decafparser.py',141),
  ('method_invocation -> field_access LPAREN arguments RPAREN','method_invocation',4,'p_method_invocation','decafparser.py',148),
  ('method_invocation -> field_access LPAREN RPAREN','method_invocation',3,'p_method_invocation','decafparser.py',149),
  ('arguments -> expr','arguments',1,'p_arguments','decafparser.py',156),
  ('arguments -> arguments COMMA expr','arguments',3,'p_arguments','decafparser.py',157),
  ('lhs -> field_access','lhs',1,'p_lhs','decafparser.py',164),
  ('field_access -> primary PERIOD ID','field_access',3,'p_field_access','decafparser.py',169),
  ('field_access -> ID','field_access',1,'p_field_access','decafparser.py',170),
  ('literal -> INT_CONST','literal',1,'p_literal','decafparser.py',182),
  ('literal -> FLOAT_CONST','literal',1,'p_literal','decafparser.py',183),
  ('literal -> STRING_CONST','literal',1,'p_literal','decafparser.py',184),
  ('literal -> NULL','literal',1,'p_literal','decafparser.py',185),
  ('literal -> TRUE','literal',1,'p_literal','decafparser.py',186),
  ('literal -> FALSE','literal',1,'p_literal','decafparser.py',187),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','decafparser.py',191),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','decafparser.py',192),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','decafparser.py',193),
  ('arith_op -> DIVIDE','arith_op',1,'p_arith_op','decafparser.py',194),
  ('bool_op -> AND','bool_op',1,'p_bool_op','decafparser.py',198),
  ('bool_op -> OR','bool_op',1,'p_bool_op','decafparser.py',199),
  ('bool_op -> EE','bool_op',1,'p_bool_op','decafparser.py',200),
  ('bool_op -> NE','bool_op',1,'p_bool_op','decafparser.py',201),
  ('bool_op -> LT','bool_op',1,'p_bool_op','decafparser.py',202),
  ('bool_op -> GT','bool_op',1,'p_bool_op','decafparser.py',203),
  ('bool_op -> LE','bool_op',1,'p_bool_op','decafparser.py',204),
  ('bool_op -> GE','bool_op',1,'p_bool_op','decafparser.py',205),
  ('unary_op -> PLUS','unary_op',1,'p_unary_op','decafparser.py',209),
  ('unary_op -> MINUS','unary_op',1,'p_unary_op','decafparser.py',210),
  ('unary_op -> NOT','unary_op',1,'p_unary_op','decafparser.py',211),
  ('empty -> <empty>','empty',0,'p_empty','decafparser.py',215),
]
