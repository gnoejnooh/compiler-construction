
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '72BBB2271AA502CC10063AFCD1710193'
    
_lr_action_items = {'NUMBER':([0,2,7,8,9,10,11,12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[15,15,15,15,-32,-30,15,-31,15,-22,-27,-29,-21,-24,-25,-20,15,-26,-28,-18,-19,-23,15,]),'MINUS':([0,1,3,4,5,6,7,8,9,10,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,],[12,-14,30,-1,-6,-8,12,12,-32,-30,-31,-2,-16,-17,-11,12,-22,-27,-29,-21,-24,-25,-20,12,-26,-28,-18,-19,-23,-10,-12,12,30,30,-13,30,30,-15,30,-7,]),'LE':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,28,-1,-6,-8,-2,-16,-17,-11,-10,-12,28,28,-13,28,28,-15,28,-7,]),'RPAREN':([1,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,-1,-6,-8,-2,-16,-17,-11,-10,-12,-5,43,-13,-3,-4,-15,-9,-7,]),'NE':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,24,-1,-6,-8,-2,-16,-17,-11,-10,-12,24,24,-13,24,24,-15,24,-7,]),'EE':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,23,-1,-6,-8,-2,-16,-17,-11,-10,-12,23,23,-13,23,23,-15,23,-7,]),'LT':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,27,-1,-6,-8,-2,-16,-17,-11,-10,-12,27,27,-13,27,27,-15,27,-7,]),'PLUS':([0,1,3,4,5,6,7,8,9,10,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,],[10,-14,29,-1,-6,-8,10,10,-32,-30,-31,-2,-16,-17,-11,10,-22,-27,-29,-21,-24,-25,-20,10,-26,-28,-18,-19,-23,-10,-12,10,29,29,-13,29,29,-15,29,-7,]),'$end':([1,3,4,5,6,13,14,15,17,33,34,36,38,39,40,41,42,43,],[-14,0,-1,-6,-8,-2,-16,-17,-11,-10,-12,-5,-13,-3,-4,-15,-9,-7,]),'GT':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,20,-1,-6,-8,-2,-16,-17,-11,-10,-12,20,20,-13,20,20,-15,20,-7,]),'DIVIDE':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,22,-1,-6,-8,-2,-16,-17,-11,-10,-12,22,22,-13,22,22,-15,22,-7,]),'PLUSPLUS':([0,1,6,7,8,9,10,12,14,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,41,],[2,-14,33,2,2,-32,-30,-31,-16,2,-22,-27,-29,-21,-24,-25,-20,2,-26,-28,-18,-19,-23,2,-15,]),'EQUALS':([1,6,14,41,],[-14,35,-16,-15,]),'PERIOD':([1,4,5,6,14,15,16,17,38,41,43,],[-14,32,-6,-8,-16,-17,32,-8,-8,-15,-7,]),'GE':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,21,-1,-6,-8,-2,-16,-17,-11,-10,-12,21,21,-13,21,21,-15,21,-7,]),'LPAREN':([0,2,7,8,9,10,11,12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[8,8,8,8,-32,-30,8,-31,8,-22,-27,-29,-21,-24,-25,-20,8,-26,-28,-18,-19,-23,8,]),'MINUSMINUS':([0,1,6,7,8,9,10,12,14,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,41,],[11,-14,34,11,11,-32,-30,-31,-16,11,-22,-27,-29,-21,-24,-25,-20,11,-26,-28,-18,-19,-23,11,-15,]),'TIMES':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,25,-1,-6,-8,-2,-16,-17,-11,-10,-12,25,25,-13,25,25,-15,25,-7,]),'ID':([0,2,7,8,9,10,11,12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,35,],[14,14,14,14,-32,-30,14,-31,14,-22,-27,-29,-21,-24,-25,-20,14,-26,-28,-18,-19,-23,41,14,]),'AND':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,19,-1,-6,-8,-2,-16,-17,-11,-10,-12,19,19,-13,19,19,-15,19,-7,]),'NOT':([0,7,8,9,10,12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,35,],[9,9,9,-32,-30,-31,9,-22,-27,-29,-21,-24,-25,-20,9,-26,-28,-18,-19,-23,9,]),'OR':([1,3,4,5,6,13,14,15,17,33,34,36,37,38,39,40,41,42,43,],[-14,31,-1,-6,-8,-2,-16,-17,-11,-10,-12,31,31,-13,31,31,-15,31,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'arith_op':([3,36,37,39,40,42,],[18,18,18,18,18,18,]),'field_access':([0,2,7,8,11,18,26,35,],[1,1,1,1,1,1,1,1,]),'expr':([0,7,8,18,26,35,],[3,36,37,39,40,42,]),'primary':([0,2,7,8,11,18,26,35,],[4,16,4,4,16,4,4,4,]),'bool_op':([3,36,37,39,40,42,],[26,26,26,26,26,26,]),'literal':([0,2,7,8,11,18,26,35,],[5,5,5,5,5,5,5,5,]),'lhs':([0,2,7,8,11,18,26,35,],[6,17,6,6,38,6,6,6,]),'unary_op':([0,7,8,18,26,35,],[7,7,7,7,7,7,]),'assign':([0,7,8,18,26,35,],[13,13,13,13,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('expr -> primary','expr',1,'p_expr','decafparser.py',91),
  ('expr -> assign','expr',1,'p_expr','decafparser.py',92),
  ('expr -> expr arith_op expr','expr',3,'p_expr','decafparser.py',93),
  ('expr -> expr bool_op expr','expr',3,'p_expr','decafparser.py',94),
  ('expr -> unary_op expr','expr',2,'p_expr','decafparser.py',95),
  ('primary -> literal','primary',1,'p_primary','decafparser.py',102),
  ('primary -> LPAREN expr RPAREN','primary',3,'p_primary','decafparser.py',103),
  ('primary -> lhs','primary',1,'p_primary','decafparser.py',104),
  ('assign -> lhs EQUALS expr','assign',3,'p_assign','decafparser.py',111),
  ('assign -> lhs PLUSPLUS','assign',2,'p_assign','decafparser.py',112),
  ('assign -> PLUSPLUS lhs','assign',2,'p_assign','decafparser.py',113),
  ('assign -> lhs MINUSMINUS','assign',2,'p_assign','decafparser.py',114),
  ('assign -> MINUSMINUS lhs','assign',2,'p_assign','decafparser.py',115),
  ('lhs -> field_access','lhs',1,'p_lhs','decafparser.py',122),
  ('field_access -> primary PERIOD ID','field_access',3,'p_field_access','decafparser.py',126),
  ('field_access -> ID','field_access',1,'p_field_access','decafparser.py',127),
  ('literal -> NUMBER','literal',1,'p_literal','decafparser.py',134),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','decafparser.py',138),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','decafparser.py',139),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','decafparser.py',140),
  ('arith_op -> DIVIDE','arith_op',1,'p_arith_op','decafparser.py',141),
  ('bool_op -> AND','bool_op',1,'p_bool_op','decafparser.py',145),
  ('bool_op -> OR','bool_op',1,'p_bool_op','decafparser.py',146),
  ('bool_op -> EE','bool_op',1,'p_bool_op','decafparser.py',147),
  ('bool_op -> NE','bool_op',1,'p_bool_op','decafparser.py',148),
  ('bool_op -> LT','bool_op',1,'p_bool_op','decafparser.py',149),
  ('bool_op -> GT','bool_op',1,'p_bool_op','decafparser.py',150),
  ('bool_op -> LE','bool_op',1,'p_bool_op','decafparser.py',151),
  ('bool_op -> GE','bool_op',1,'p_bool_op','decafparser.py',152),
  ('unary_op -> PLUS','unary_op',1,'p_unary_op','decafparser.py',156),
  ('unary_op -> MINUS','unary_op',1,'p_unary_op','decafparser.py',157),
  ('unary_op -> NOT','unary_op',1,'p_unary_op','decafparser.py',158),
]
